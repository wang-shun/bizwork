/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sogou.bizwork.api.message.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BizworkMessageTService {

  public interface Iface {

    public com.sogou.bizwork.api.message.MessageResult insertBriefMessage(List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages) throws com.sogou.bizwork.api.exception.ApiTException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void insertBriefMessage(List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.sogou.bizwork.api.message.MessageResult insertBriefMessage(List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages) throws com.sogou.bizwork.api.exception.ApiTException, org.apache.thrift.TException
    {
      send_insertBriefMessage(briefTypeMessages);
      return recv_insertBriefMessage();
    }

    public void send_insertBriefMessage(List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages) throws org.apache.thrift.TException
    {
      insertBriefMessage_args args = new insertBriefMessage_args();
      args.setBriefTypeMessages(briefTypeMessages);
      sendBase("insertBriefMessage", args);
    }

    public com.sogou.bizwork.api.message.MessageResult recv_insertBriefMessage() throws com.sogou.bizwork.api.exception.ApiTException, org.apache.thrift.TException
    {
      insertBriefMessage_result result = new insertBriefMessage_result();
      receiveBase(result, "insertBriefMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertBriefMessage failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insertBriefMessage(List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertBriefMessage_call method_call = new insertBriefMessage_call(briefTypeMessages, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertBriefMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages;
      public insertBriefMessage_call(List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.briefTypeMessages = briefTypeMessages;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertBriefMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertBriefMessage_args args = new insertBriefMessage_args();
        args.setBriefTypeMessages(briefTypeMessages);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.sogou.bizwork.api.message.MessageResult getResult() throws com.sogou.bizwork.api.exception.ApiTException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertBriefMessage();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insertBriefMessage", new insertBriefMessage());
      return processMap;
    }

    public static class insertBriefMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertBriefMessage_args> {
      public insertBriefMessage() {
        super("insertBriefMessage");
      }

      public insertBriefMessage_args getEmptyArgsInstance() {
        return new insertBriefMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertBriefMessage_result getResult(I iface, insertBriefMessage_args args) throws org.apache.thrift.TException {
        insertBriefMessage_result result = new insertBriefMessage_result();
        try {
          result.success = iface.insertBriefMessage(args.briefTypeMessages);
        } catch (com.sogou.bizwork.api.exception.ApiTException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("insertBriefMessage", new insertBriefMessage());
      return processMap;
    }

    public static class insertBriefMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertBriefMessage_args, com.sogou.bizwork.api.message.MessageResult> {
      public insertBriefMessage() {
        super("insertBriefMessage");
      }

      public insertBriefMessage_args getEmptyArgsInstance() {
        return new insertBriefMessage_args();
      }

      public AsyncMethodCallback<com.sogou.bizwork.api.message.MessageResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.sogou.bizwork.api.message.MessageResult>() { 
          public void onComplete(com.sogou.bizwork.api.message.MessageResult o) {
            insertBriefMessage_result result = new insertBriefMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertBriefMessage_result result = new insertBriefMessage_result();
            if (e instanceof com.sogou.bizwork.api.exception.ApiTException) {
                        result.e = (com.sogou.bizwork.api.exception.ApiTException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertBriefMessage_args args, org.apache.thrift.async.AsyncMethodCallback<com.sogou.bizwork.api.message.MessageResult> resultHandler) throws TException {
        iface.insertBriefMessage(args.briefTypeMessages,resultHandler);
      }
    }

  }

  public static class insertBriefMessage_args implements org.apache.thrift.TBase<insertBriefMessage_args, insertBriefMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertBriefMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertBriefMessage_args");

    private static final org.apache.thrift.protocol.TField BRIEF_TYPE_MESSAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("briefTypeMessages", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertBriefMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertBriefMessage_argsTupleSchemeFactory());
    }

    public List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BRIEF_TYPE_MESSAGES((short)1, "briefTypeMessages");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BRIEF_TYPE_MESSAGES
            return BRIEF_TYPE_MESSAGES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BRIEF_TYPE_MESSAGES, new org.apache.thrift.meta_data.FieldMetaData("briefTypeMessages", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.api.message.BriefTypeMessage.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertBriefMessage_args.class, metaDataMap);
    }

    public insertBriefMessage_args() {
    }

    public insertBriefMessage_args(
      List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages)
    {
      this();
      this.briefTypeMessages = briefTypeMessages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertBriefMessage_args(insertBriefMessage_args other) {
      if (other.isSetBriefTypeMessages()) {
        List<com.sogou.bizwork.api.message.BriefTypeMessage> __this__briefTypeMessages = new ArrayList<com.sogou.bizwork.api.message.BriefTypeMessage>(other.briefTypeMessages.size());
        for (com.sogou.bizwork.api.message.BriefTypeMessage other_element : other.briefTypeMessages) {
          __this__briefTypeMessages.add(new com.sogou.bizwork.api.message.BriefTypeMessage(other_element));
        }
        this.briefTypeMessages = __this__briefTypeMessages;
      }
    }

    public insertBriefMessage_args deepCopy() {
      return new insertBriefMessage_args(this);
    }

    @Override
    public void clear() {
      this.briefTypeMessages = null;
    }

    public int getBriefTypeMessagesSize() {
      return (this.briefTypeMessages == null) ? 0 : this.briefTypeMessages.size();
    }

    public java.util.Iterator<com.sogou.bizwork.api.message.BriefTypeMessage> getBriefTypeMessagesIterator() {
      return (this.briefTypeMessages == null) ? null : this.briefTypeMessages.iterator();
    }

    public void addToBriefTypeMessages(com.sogou.bizwork.api.message.BriefTypeMessage elem) {
      if (this.briefTypeMessages == null) {
        this.briefTypeMessages = new ArrayList<com.sogou.bizwork.api.message.BriefTypeMessage>();
      }
      this.briefTypeMessages.add(elem);
    }

    public List<com.sogou.bizwork.api.message.BriefTypeMessage> getBriefTypeMessages() {
      return this.briefTypeMessages;
    }

    public insertBriefMessage_args setBriefTypeMessages(List<com.sogou.bizwork.api.message.BriefTypeMessage> briefTypeMessages) {
      this.briefTypeMessages = briefTypeMessages;
      return this;
    }

    public void unsetBriefTypeMessages() {
      this.briefTypeMessages = null;
    }

    /** Returns true if field briefTypeMessages is set (has been assigned a value) and false otherwise */
    public boolean isSetBriefTypeMessages() {
      return this.briefTypeMessages != null;
    }

    public void setBriefTypeMessagesIsSet(boolean value) {
      if (!value) {
        this.briefTypeMessages = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BRIEF_TYPE_MESSAGES:
        if (value == null) {
          unsetBriefTypeMessages();
        } else {
          setBriefTypeMessages((List<com.sogou.bizwork.api.message.BriefTypeMessage>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BRIEF_TYPE_MESSAGES:
        return getBriefTypeMessages();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BRIEF_TYPE_MESSAGES:
        return isSetBriefTypeMessages();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertBriefMessage_args)
        return this.equals((insertBriefMessage_args)that);
      return false;
    }

    public boolean equals(insertBriefMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_briefTypeMessages = true && this.isSetBriefTypeMessages();
      boolean that_present_briefTypeMessages = true && that.isSetBriefTypeMessages();
      if (this_present_briefTypeMessages || that_present_briefTypeMessages) {
        if (!(this_present_briefTypeMessages && that_present_briefTypeMessages))
          return false;
        if (!this.briefTypeMessages.equals(that.briefTypeMessages))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertBriefMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBriefTypeMessages()).compareTo(other.isSetBriefTypeMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBriefTypeMessages()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.briefTypeMessages, other.briefTypeMessages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertBriefMessage_args(");
      boolean first = true;

      sb.append("briefTypeMessages:");
      if (this.briefTypeMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.briefTypeMessages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertBriefMessage_argsStandardSchemeFactory implements SchemeFactory {
      public insertBriefMessage_argsStandardScheme getScheme() {
        return new insertBriefMessage_argsStandardScheme();
      }
    }

    private static class insertBriefMessage_argsStandardScheme extends StandardScheme<insertBriefMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertBriefMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BRIEF_TYPE_MESSAGES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.briefTypeMessages = new ArrayList<com.sogou.bizwork.api.message.BriefTypeMessage>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.sogou.bizwork.api.message.BriefTypeMessage _elem2;
                    _elem2 = new com.sogou.bizwork.api.message.BriefTypeMessage();
                    _elem2.read(iprot);
                    struct.briefTypeMessages.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setBriefTypeMessagesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertBriefMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.briefTypeMessages != null) {
          oprot.writeFieldBegin(BRIEF_TYPE_MESSAGES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.briefTypeMessages.size()));
            for (com.sogou.bizwork.api.message.BriefTypeMessage _iter3 : struct.briefTypeMessages)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertBriefMessage_argsTupleSchemeFactory implements SchemeFactory {
      public insertBriefMessage_argsTupleScheme getScheme() {
        return new insertBriefMessage_argsTupleScheme();
      }
    }

    private static class insertBriefMessage_argsTupleScheme extends TupleScheme<insertBriefMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertBriefMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBriefTypeMessages()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBriefTypeMessages()) {
          {
            oprot.writeI32(struct.briefTypeMessages.size());
            for (com.sogou.bizwork.api.message.BriefTypeMessage _iter4 : struct.briefTypeMessages)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertBriefMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.briefTypeMessages = new ArrayList<com.sogou.bizwork.api.message.BriefTypeMessage>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.sogou.bizwork.api.message.BriefTypeMessage _elem7;
              _elem7 = new com.sogou.bizwork.api.message.BriefTypeMessage();
              _elem7.read(iprot);
              struct.briefTypeMessages.add(_elem7);
            }
          }
          struct.setBriefTypeMessagesIsSet(true);
        }
      }
    }

  }

  public static class insertBriefMessage_result implements org.apache.thrift.TBase<insertBriefMessage_result, insertBriefMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertBriefMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertBriefMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertBriefMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertBriefMessage_resultTupleSchemeFactory());
    }

    public com.sogou.bizwork.api.message.MessageResult success; // required
    public com.sogou.bizwork.api.exception.ApiTException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.sogou.bizwork.api.message.MessageResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertBriefMessage_result.class, metaDataMap);
    }

    public insertBriefMessage_result() {
    }

    public insertBriefMessage_result(
      com.sogou.bizwork.api.message.MessageResult success,
      com.sogou.bizwork.api.exception.ApiTException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertBriefMessage_result(insertBriefMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.sogou.bizwork.api.message.MessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.sogou.bizwork.api.exception.ApiTException(other.e);
      }
    }

    public insertBriefMessage_result deepCopy() {
      return new insertBriefMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.sogou.bizwork.api.message.MessageResult getSuccess() {
      return this.success;
    }

    public insertBriefMessage_result setSuccess(com.sogou.bizwork.api.message.MessageResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.sogou.bizwork.api.exception.ApiTException getE() {
      return this.e;
    }

    public insertBriefMessage_result setE(com.sogou.bizwork.api.exception.ApiTException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.sogou.bizwork.api.message.MessageResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.sogou.bizwork.api.exception.ApiTException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertBriefMessage_result)
        return this.equals((insertBriefMessage_result)that);
      return false;
    }

    public boolean equals(insertBriefMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertBriefMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertBriefMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertBriefMessage_resultStandardSchemeFactory implements SchemeFactory {
      public insertBriefMessage_resultStandardScheme getScheme() {
        return new insertBriefMessage_resultStandardScheme();
      }
    }

    private static class insertBriefMessage_resultStandardScheme extends StandardScheme<insertBriefMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertBriefMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.sogou.bizwork.api.message.MessageResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.sogou.bizwork.api.exception.ApiTException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertBriefMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertBriefMessage_resultTupleSchemeFactory implements SchemeFactory {
      public insertBriefMessage_resultTupleScheme getScheme() {
        return new insertBriefMessage_resultTupleScheme();
      }
    }

    private static class insertBriefMessage_resultTupleScheme extends TupleScheme<insertBriefMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertBriefMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertBriefMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.sogou.bizwork.api.message.MessageResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.sogou.bizwork.api.exception.ApiTException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}
